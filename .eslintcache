[{"C:\\Users\\אריאל שפר\\ham-system-app\\src\\index.js":"1","C:\\Users\\אריאל שפר\\ham-system-app\\src\\App.js":"2","C:\\Users\\אריאל שפר\\ham-system-app\\src\\reportWebVitals.js":"3","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\LogIn\\LogIn.js":"4","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\HomePage\\HomePage.js":"5","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\Navbar\\Navbar.js":"6","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\UserModel.js":"7","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Issues\\Issues.js":"8","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\Card\\Card.js":"9","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Messages\\Messages.js":"10","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\MessageModel.js":"11","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\MessagesView\\MessagesView.js":"12","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewMessageModal\\NewMessageModal.js":"13","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\CommentsModel.js":"14","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\UpdateMessageModal\\UpdateMessageModal.js":"15","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\SignUp\\SignUp.js":"16","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Votings\\Votings.js":"17","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\VotingModel.js":"18","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewVotingModal\\NewVotingModal.js":"19","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\VotingsView\\VotingsView.js":"20","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Tenants\\Tenants.js":"21","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewTenantModat\\NewTenantModal.js":"22","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\TenantsView\\TenantsView.js":"23","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\UpdateTenantsModal\\UpdateTenantsModal.js":"24","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\PieChart\\PieChart.js":"25","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Dashboards\\Dashboards.js":"26","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\EndDataUpdateModal\\EndDateUpdateModal.js":"27"},{"size":827,"mtime":1610393629722,"results":"28","hashOfConfig":"29"},{"size":10879,"mtime":1611622544130,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":2337,"mtime":1611622348527,"results":"32","hashOfConfig":"29"},{"size":2054,"mtime":1611622283781,"results":"33","hashOfConfig":"29"},{"size":1760,"mtime":1611619221759,"results":"34","hashOfConfig":"29"},{"size":732,"mtime":1611522956065,"results":"35","hashOfConfig":"29"},{"size":493,"mtime":1611450780117,"results":"36","hashOfConfig":"29"},{"size":790,"mtime":1611013012830,"results":"37","hashOfConfig":"29"},{"size":4218,"mtime":1611615380182,"results":"38","hashOfConfig":"29"},{"size":719,"mtime":1611444557348,"results":"39","hashOfConfig":"29"},{"size":7347,"mtime":1611621990782,"results":"40","hashOfConfig":"29"},{"size":3388,"mtime":1611622029402,"results":"41","hashOfConfig":"29"},{"size":350,"mtime":1611145499504,"results":"42","hashOfConfig":"29"},{"size":3732,"mtime":1611622180505,"results":"43","hashOfConfig":"29"},{"size":5174,"mtime":1611622408387,"results":"44","hashOfConfig":"29"},{"size":4111,"mtime":1611613666899,"results":"45","hashOfConfig":"29"},{"size":1082,"mtime":1611622288678,"results":"46","hashOfConfig":"29"},{"size":4663,"mtime":1611623609289,"results":"47","hashOfConfig":"29"},{"size":4865,"mtime":1611622218982,"results":"48","hashOfConfig":"29"},{"size":2413,"mtime":1611624609104,"results":"49","hashOfConfig":"29"},{"size":4357,"mtime":1611226918615,"results":"50","hashOfConfig":"29"},{"size":3099,"mtime":1611622166070,"results":"51","hashOfConfig":"29"},{"size":4877,"mtime":1611603555911,"results":"52","hashOfConfig":"29"},{"size":1707,"mtime":1611622113337,"results":"53","hashOfConfig":"29"},{"size":2887,"mtime":1611576049026,"results":"54","hashOfConfig":"29"},{"size":1691,"mtime":1611598872736,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"8yuumn",{"filePath":"59","messages":"60","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"58"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"58"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"58"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"58"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"58"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"C:\\Users\\אריאל שפר\\ham-system-app\\src\\index.js",[],["122","123"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\App.js",["124","125"],"import './App.css';\nimport { HashRouter, Route, Switch } from 'react-router-dom';\nimport { LogIn } from './pages/LogIn/LogIn';\nimport { SignUp } from './pages/SignUp/SignUp';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { useEffect, useState } from 'react';\nimport Parse from 'parse';\nimport UserModel from './models/UserModel';\nimport Messages from './pages/Messages/Messages';\nimport Votings from './pages/Votings/Votings';\nimport Tenants from './pages/Tenants/Tenants';\nimport Dashboards from './pages/Dashboards/Dashboards';\nimport MessageModel from './models/MessageModel';\nimport VotingModel from './models/VotingModel';\nimport { AppNavbar } from './components/Navbar/Navbar';\n\n//App is the main component\n//Here we fetch all data and handle the connection wih the DB\n//users is an array of all relevnt users by the active user's community\n//messages is an array of all relevant messages by the active user's community\n//votings is an array of all relevant votings by the active user's community\n\nfunction App() {\n  const [activeUser, setActiveUser] = useState(\n    Parse.User.current() ? new UserModel(Parse.User.current()) : null);\n  const [redirect, setRedirect] = useState(false);\n  const [users, setUsers] = useState([]);\n  const [messages, setMessages] = useState([]);\n  const [votings, setVotings] = useState([]);\n\n  useEffect(()=> {\n    async function fetchUsersData() {\n      const parseUser = Parse.Object.extend('User');\n      const query = new Parse.Query(parseUser);\n      const community = new Parse.Object.extend('Community');\n      community.id = activeUser.community;\n      query.equalTo(\"community\", activeUser.community);\n      // query.equalTo(\"deleted\", false);\n      try {\n        const parseUsers = await query.find();\n        setUsers(parseUsers.map(item => new UserModel(item)));\n        console.log(\"Success! users arr\", parseUsers.map(item => new UserModel(item)));\n      } catch (error) {\n        console.log(\"Error! users arr\", error);\n      }\n    }\n\n    async function fetchMessagesData() {\n        const parseMessage = Parse.Object.extend('message');\n        const query = new Parse.Query(parseMessage);\n        query.equalTo(\"community\", activeUser.community);\n        try {const parseMessages = await query.find();\n        setMessages(parseMessages.map(item => new MessageModel(item)));\n        console.log(\"Success! messages arr: \", parseMessages);}\n        catch (error) {\n          console.log(\"Error! messages arr\", error);\n        }\n    }\n\n    async function fetchVotingsData() {\n      const Voting = Parse.Object.extend('Voting');\n      const query = new Parse.Query(Voting);\n      query.equalTo(\"community\", activeUser.community);\n      try {\n        const parseVotings = await query.find();\n        setVotings(parseVotings.map(item => new VotingModel(item)));\n        console.log(\"Success! votings arr\", votings);\n      } catch (error){\n        console.log(\"Error! votings arr\", error);\n      }\n      \n  }\n\n    if (activeUser) {\n        fetchUsersData();\n        fetchMessagesData();\n        fetchVotingsData();\n    }\n}, [activeUser])\n\n  function handleLogin(loggedInUser) {\n    setActiveUser(loggedInUser);\n    setRedirect(false);\n  }\n\n  function handleLogout(loggedInUser) {\n    setActiveUser(null);\n    Parse.User.logOut();\n    setRedirect(true);\n  }\n\n  function handleSignup(loggedInUser) {\n    setActiveUser(loggedInUser);\n    setRedirect(false);\n  }\n\n  async function addMessage(title, details, priority, img) {\n    const message = Parse.Object.extend('message');\n    const newMessage = new message();\n    \n    newMessage.set('title', title);\n    newMessage.set('details', details);\n    newMessage.set('priorityName', priority);\n    newMessage.set('img', new Parse.File(img.name, img));\n    newMessage.set('createdBy', Parse.User.current());\n    newMessage.set('readBy', [activeUser.id]);\n    newMessage.set('community', activeUser.community)\n    \n    try {const parseMessage = await newMessage.save();\n      console.log(\"Success! add message: \", parseMessage)\n      setMessages(messages.concat(new MessageModel(parseMessage)));\n    } catch (error){\n      console.log(\"Error! add message\", error);\n    }\n}\n\nasync function updateMessage(id, title, details, priority, img) {\n    const message = Parse.Object.extend('message');\n    const query = new Parse.Query(message);\n    const object = await query.get(id);\n    object.set('title', title);\n    object.set('details', details);\n    object.set('priorityName', priority);\n    object.set('img',  new Parse.File(img.name, img));\n    try {const response = await object.save();\n      console.log('Success! updated message', response);\n      const tmpArr = messages.filter(item => item.id !== id);\n      setMessages(tmpArr.concat(new MessageModel(response)));\n    } catch (error) {\n      console.log(\"Error! update message\", error);\n    } \n}\n\nasync function deleteMessage(id) {\n    const ParseMessage = Parse.Object.extend('message');\n    const query = new Parse.Query(ParseMessage);\n    const object = await query.get(id);\n    try {\n      const response = await object.destroy();\n      console.log('Success! deleted message', response);\n      const tmpArr = messages.filter(item => item.id !== id);\n      setMessages(tmpArr);\n    } catch (error) {\n      console.log(\"Error! delete message\", error);\n    }\n}\n\nasync function addVoting(title, details, endDate, options) {\n  const Voting = Parse.Object.extend('Voting');\n  const myNewObject = new Voting();\n  \n  myNewObject.set('title', title);\n  myNewObject.set('details', details);\n  myNewObject.set('options', options);\n  myNewObject.set('endDate', new Date(endDate));\n  myNewObject.set('community', activeUser.parseUser.get(\"community\"));\n  myNewObject.set('results', []);\n  \n  try{\n      const result = await myNewObject.save();\n      console.log('Success! add voting', result);\n      setVotings(votings.concat(new VotingModel(result)))\n  }\n  catch(error){\n    console.log(\"Error! add voting\", error);\n  }\n}\n\nasync function updateVoting(endDate, voting) {\n  const Voting = Parse.Object.extend('Voting');\n  const query = new Parse.Query(Voting);\n  const object = await query.get(voting.id);\n  \n  object.set('endDate', new Date(endDate));\n \n  try {\n      const response = await object.save();\n      console.log('Success! updated voting end date', response);\n      let items = [...votings];\n      const getIndex = votings.indexOf(voting);\n      items[getIndex] = new VotingModel(response);\n      setVotings(items);\n  } catch (error) {\n      console.log(\"Error! update voting end date\", error);\n  }\n}\n\nasync function updateSelectedVote(vote, voting) {\n  const Voting = Parse.Object.extend('Voting');\n  const query = new Parse.Query(Voting);\n  const object = await query.get(voting.id);\n  let results = voting.results.concat({\"user\": activeUser.id, \"vote\": vote});\n  object.set('results', results);\n \n  try {\n      const response = await object.save();\n      console.log('Success! updated voting results', response);\n      let items = [...votings];\n      const getIndex = votings.indexOf(voting);\n      items[getIndex] = new VotingModel(response);\n      setVotings(items);\n  } catch (error) {\n      console.log(\"Error! update voting results\", error);\n  }\n}\n\nasync function addTenant(fname, lname, email, building, apartment, img) {\n  const user = Parse.Object.extend('User');\n  const newUser = new user();\n  let acl = new Parse.ACL();\n  acl.setPublicWriteAccess( true );\n  acl.setPublicReadAccess( true);\n  newUser.setACL( acl );\n  newUser.set('fname', fname);\n  newUser.set('lname', lname);\n  newUser.set('username', fname + lname);\n  newUser.set('email', email);\n  newUser.set('fetchEmail', email);\n  newUser.set('password', \"123\");\n  newUser.set('building', building);\n  newUser.set('apartment', apartment);\n  newUser.set('img', new Parse.File(img.name, img));\n  newUser.set('community', activeUser.parseUser.get(\"community\"));\n  newUser.set('isCommitteeMember', false);\n  try {\n      const parseUser = await newUser.save();\n      setUsers(users.concat(new UserModel(parseUser)));\n      console.log('Success! adding user(tenant)', parseUser);\n    } catch (error){\n      console.log(\"Error! adding user(tenant)\", error);\n  }\n}\n\nasync function updateTenantInfo(tenant, id, fname, lname, email, building, apartment, img) {\n  const User = new Parse.User();\n  const query = new Parse.Query(User);\n  const user = await query.get(id);\n  user.set('fname', fname);\n  user.set('lname', lname);\n  user.set('email', email);\n  user.set('fetchEmail', email);\n  user.set('building', building);\n  user.set('apartment', apartment);\n  user.set('img',  new Parse.File(img.name, img));\n  try {\n      const response = await user.save();\n      console.log('Success! updating user(tenant)', response);\n      let items = [...users];\n      const getIndex = users.indexOf(tenant);\n      items[getIndex] = new UserModel(response);\n      setUsers(items);\n  } catch(error) {\n      console.error('Error! updating user(tenant)', error);\n  }\n}\n\nasync function deleteTenant(id) {\n  const User = new Parse.User();\n  const query = new Parse.Query(User);\n\n  const user = await query.get(id);\n  user.set('deleted', true);\n  try {\n      const response = await user.save();\n      console.log('Success! delete user(tenant)', response);\n      const tmpArr = users.filter(item => item.id !== id);\n      setUsers(tmpArr);\n  } catch(error) {\n      console.error('Error! delete user(tenant)', error);\n  }\n}\n\n\n  return (\n    <div className=\"App\">\n      <HashRouter>\n        <AppNavbar activeUser={activeUser} onLogOut={handleLogout}></AppNavbar>\n        <Switch>\n          <Route exact path=\"/\"><HomePage activeUser={activeUser} onLogOut={handleLogout}/></Route>\n          <Route exact path=\"/dashboards\"><Dashboards activeUser={activeUser} messages={messages} votings={votings} addVoting={addVoting} updateVoting={updateVoting} updateSelectedVote={updateSelectedVote} onLogOut={handleLogout} users={users}/></Route>\n          {activeUser && activeUser.isCommitteeMember ? <Route exact path=\"/tenants\"><Tenants activeUser={activeUser} users={users} addTenant={addTenant} updateTenantInfo={updateTenantInfo} deleteTenant={deleteTenant} onLogOut={handleLogout}/></Route> : null}\n          <Route exact path=\"/messages\"><Messages activeUser={activeUser} users={users} messages={messages} addMessage={addMessage} updateMessage={updateMessage} deleteMessage={deleteMessage} onLogOut={handleLogout}/></Route>\n          <Route exact path=\"/votings\"><Votings activeUser={activeUser} votings={votings} addVoting={addVoting} updateVoting={updateVoting} updateSelectedVote={updateSelectedVote} onLogOut={handleLogout} users={users}/></Route>\n          <Route exact path=\"/login\"><LogIn onLogIn={handleLogin}/></Route>\n          <Route exact path=\"/signup\"><SignUp onSignUp={handleSignup}/></Route>\n        </Switch>\n      </HashRouter>\n    </div>\n  );\n}\n\nexport default App;\n","C:\\Users\\אריאל שפר\\ham-system-app\\src\\reportWebVitals.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\LogIn\\LogIn.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\HomePage\\HomePage.js",["126","127"],"// @flow\r\nimport * as React from 'react';\r\nimport { Carousel, Container, Row } from 'react-bootstrap';\r\nimport './HomePage.css';\r\n\r\nexport function HomePage(props) {\r\n  const {activeUser, onLogOut} = props;\r\n  return (\r\n    <div className=\"p-hp\">\r\n      <div>\r\n\r\n        <Container>\r\n          <Row className=\"justify-content-lg-center\">\r\n            <h1>Homeowner Association Management System</h1>\r\n          </Row>\r\n          <Row>\r\n          <Carousel>\r\n            <Carousel.Item>\r\n              <img\r\n                className=\"d-block img-set mx-auto\"\r\n                src=\"https://www.gethow.org/wp-content/uploads/2019/08/property-manager.jpg\"\r\n                alt=\"First slide\"\r\n              />\r\n              <Carousel.Caption>\r\n                <h3>Manage your committee</h3>\r\n                <p>With this app you will find it very easy to manage your committee</p>\r\n              </Carousel.Caption>\r\n            </Carousel.Item>\r\n            <Carousel.Item>\r\n              <img\r\n                className=\"d-block img-set mx-auto\"\r\n                src=\"https://images.idgesg.net/images/article/2018/01/group-of-people-applauding_agreement_community-100746938-large.jpg\"\r\n                alt=\"Third slide\"\r\n              />\r\n\r\n              <Carousel.Caption>\r\n                <h3>Improve your performance</h3>\r\n                <p>This app will help you improve your performance</p>\r\n              </Carousel.Caption>\r\n            </Carousel.Item>\r\n            <Carousel.Item>\r\n              <img\r\n                className=\"d-block img-set mx-auto\"\r\n                src=\"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTqXbDmRJkcFQWqNf-cBaynQC-2sNF6mKcDag&usqp=CAU\"\r\n                alt=\"Third slide\"\r\n              />\r\n\r\n              <Carousel.Caption>\r\n                <h3>Happy tenants</h3>\r\n                <p>Useing this app will lead to much happyer tenants</p>\r\n              </Carousel.Caption>\r\n            </Carousel.Item>\r\n          </Carousel>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n      </div>\r\n  );\r\n};","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\Navbar\\Navbar.js",["128"],"// @flow\r\nimport * as React from 'react';\r\nimport {Nav, Navbar, NavDropdown} from 'react-bootstrap';\r\nimport './Navbar.css';\r\n\r\n\r\nexport function AppNavbar(props) {\r\n  const {activeUser, onLogOut } = props;\r\n\r\n  let greetUser;\r\n  if (activeUser) {\r\n    greetUser = \"Hello \" + activeUser.fname;\r\n  }\r\n  return (\r\n    <div className=\"c-nav\">\r\n      <Navbar expand=\"md\">\r\n        <Navbar.Brand href=\"#/\">HAM System</Navbar.Brand>\r\n        <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n        <Navbar.Collapse id=\"basic-navbar-nav\">\r\n            <Nav activeKey=\"#\" className=\"mr-auto\">\r\n              {activeUser ? <Nav.Link href=\"#/\">Home</Nav.Link> : null}\r\n              {activeUser ? <Nav.Link href=\"#/dashboards\">Dashboards</Nav.Link> : null}\r\n              {activeUser && activeUser.isCommitteeMember ? <Nav.Link href=\"#/tenants\">Tenants</Nav.Link> : null}\r\n              {activeUser ? <Nav.Link href=\"#/messages\">Messages</Nav.Link> : null}\r\n              {activeUser ? <Nav.Link href=\"#/votings\">Votings</Nav.Link> : null}\r\n            </Nav>\r\n            <Nav className=\"ml-auto\">\r\n            {/* {activeUser ? <NavDropdown title={greetUser} id=\"basic-nav-dropdown\">\r\n                <NavDropdown.Item className=\"logout\" href=\"#\" onClick={() => onLogOut()}>LogOut</NavDropdown.Item>\r\n                </NavDropdown> : null} */}\r\n              {activeUser ? null : <Nav.Link href=\"#/login\">LogIn</Nav.Link>}\r\n              {activeUser ? null : <Nav.Link href=\"#/signup\">SignUp</Nav.Link>}\r\n              {activeUser ? <Nav.Link >{greetUser}</Nav.Link> : null}\r\n              {activeUser ? <Nav.Link href=\"#\" onClick={() => onLogOut()}>LogOut</Nav.Link> : null}\r\n            </Nav>\r\n        </Navbar.Collapse>\r\n        </Navbar>\r\n    </div>\r\n  );\r\n};","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\UserModel.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Issues\\Issues.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\Card\\Card.js",["129"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Messages\\Messages.js",["130"],"import React, { useState } from 'react';\r\nimport { Button, Col, Container, Dropdown, DropdownButton, Form, Row } from 'react-bootstrap';\r\nimport './Messages.css';\r\nimport MessagesView from '../../components/MessagesView/MessagesView';\r\nimport NewMessageModal from '../../components/NewMessageModal/NewMessageModal';\r\nimport { Redirect } from 'react-router';\r\n\r\n//Messages component is the page were user see all relevant messages, sort and filter them\r\n//Committee member can add a new message, update message details and delete message\r\n//All user can also add comments to each message\r\nfunction Messages(props) {\r\n    const {activeUser, users, messages, addMessage, updateMessage, deleteMessage, onLogOut} = props;\r\n    const [searchByStr, setSearchByStr] = useState(\"\");\r\n    const [filterByPriority, setFilterByPriority] = useState(null);\r\n    const [sortBy, setSortBy] = useState(\"createdAt\");\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n\r\n    if(!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    //convert data to presentation\r\n  \r\n    const filteredMsg = messages.filter(msg => {return (msg.title.includes(searchByStr) || msg.details.includes(searchByStr)) && (filterByPriority ? msg.priority === filterByPriority : true)});\r\n    \r\n    filteredMsg.sort((msg1, msg2) => {\r\n        if(msg1[sortBy] > msg2[sortBy]){\r\n            return 1;\r\n        } else if (msg1[sortBy] < msg2[sortBy]){\r\n            return -1;\r\n        } else {\r\n            return 0;\r\n        }\r\n    })\r\n        \r\n    return (\r\n        <div className=\"p-messages\">\r\n            <div className=\"filters\">\r\n                <Container>\r\n                    <Row>\r\n                        <Col lg={5} md={12} sm={12}>\r\n                            <Form>\r\n                                <Form.Group controlId=\"formBasicSearch\">\r\n                                <Form.Control value={searchByStr} type=\"text\" placeholder=\"Filter by text in Title and Details\" onChange={e => setSearchByStr(e.target.value)}/>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Col>\r\n                        <Col lg={3} md={6} sm={12}>\r\n                            <DropdownButton className=\"filter-btn\" value={filterByPriority} id=\"dropdown-basic-button\" title={\"Filter by Priority: \" + filterByPriority} onSelect={e => setFilterByPriority(e)}>\r\n                                <Dropdown.Item eventKey=\"Info\" href=\"#\">Info</Dropdown.Item>\r\n                                <Dropdown.Item eventKey=\"Important\" href=\"#\">Important</Dropdown.Item>\r\n                            </DropdownButton>\r\n                        </Col>\r\n                        <Col lg={4} md={6} sm={12}>\r\n                            <Form>\r\n                                <Form.Group value={sortBy} as={Row} onChange={e => setSortBy(e.target.value)}>\r\n                                    <Form.Label column as=\"legend\">Sort By:</Form.Label>\r\n                                    <Form.Check value=\"createdAt\" type=\"radio\" label=\"Date\" name=\"formHorizontalRadios\" id=\"formHorizontalRadios1\" className=\"sort-by\"/>\r\n                                    <Form.Check value=\"priority\" type=\"radio\" label=\"Priority\" name=\"formHorizontalRadios\" id=\"formHorizontalRadios2\" className=\"sort-by\"/>\r\n                                </Form.Group>\r\n                            </Form>\r\n                        </Col>\r\n                    </Row>\r\n                    <Row>\r\n                        {activeUser.isCommitteeMember ?\r\n                        <Col className=\"new-msg-btn\">\r\n                            <Button variant=\"link\" onClick={() => setShowModal(true)}>New Message</Button>\r\n                        </Col> : null}\r\n                    </Row>\r\n                </Container>\r\n                \r\n            </div>\r\n            \r\n            <Container>\r\n                <MessagesView messages={filteredMsg} activeUser={activeUser} users={users} deleteMessage={deleteMessage} updateMessageFromModal={updateMessage}/>\r\n            </Container>\r\n            <NewMessageModal show={showModal} handleClose={() => setShowModal(false)} addMessage={addMessage}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Messages;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\MessageModel.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\MessagesView\\MessagesView.js",["131","132","133","134","135"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Accordion, Button, Card, Form, FormControl, InputGroup } from 'react-bootstrap';\r\nimport './MessagesView.css';\r\nimport Parse from 'parse';\r\nimport CommentsModel from '../../models/CommentsModel';\r\nimport { BellFill, EnvelopeFill, EnvelopeOpen, PersonCircle } from 'react-bootstrap-icons';\r\nimport UpdateMessageModal from '../UpdateMessageModal/UpdateMessageModal';\r\nimport { Redirect } from 'react-router';\r\n\r\nfunction MessagesView(props) {\r\n    const {messages, activeUser, users, deleteMessage, updateMessageFromModal} = props;\r\n    const [selectedMsg, setSelectedMsg] = useState(null);\r\n    const [commentsArr, setCommentsArr] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [addComment, setAddComment] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(()=> {\r\n\r\n        async function fetchCommentsData(msg) {\r\n            const parseComment = Parse.Object.extend('Comment');\r\n            const query = new Parse.Query(parseComment);\r\n            query.equalTo(\"msg\", messages[selectedMsg].parseMsg);\r\n            const parseComments = await query.find();\r\n            setCommentsArr(parseComments.map(item => new CommentsModel(item)));\r\n            setLoading(false);\r\n            console.log(\"comments arr\", commentsArr);\r\n        }\r\n            if (selectedMsg !== null) {\r\n                fetchCommentsData();\r\n            }\r\n    }, [selectedMsg])\r\n\r\n    if(!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    async function updateMessage(readBy, id){\r\n        const message = Parse.Object.extend('message');\r\n        const query = new Parse.Query(message);\r\n        const object = await query.get(id);\r\n        object.set('readBy', readBy);\r\n        try{\r\n            const response = await object.save();\r\n            console.log('Updated message', response);\r\n        }\r\n        catch (error1) {\r\n            console.error('Error while updating message', error1);\r\n        }\r\n    }\r\n\r\n    function msgOnClick(eventKey) {\r\n        setLoading(true);\r\n        setSelectedMsg(eventKey);\r\n\r\n        if (wasReadByUser(eventKey)){\r\n            return;\r\n        } else {\r\n            messages[eventKey].readBy.push(activeUser.id)\r\n            updateMessage(messages[eventKey].readBy, messages[eventKey].id);\r\n        }\r\n    }\r\n\r\n    function wasReadByUser(eventKey) {\r\n        if (messages[eventKey].readBy.includes(activeUser.id)){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async function addCommentToDB() {\r\n        const message = Parse.Object.extend('message');\r\n        const query = new Parse.Query(message);\r\n        const Comment = Parse.Object.extend('Comment');\r\n        const myNewObject = new Comment();\r\n        const msgObject = await query.get(messages[selectedMsg].id);\r\n        myNewObject.set('description', addComment);\r\n        myNewObject.set('user', Parse.User.current());\r\n        myNewObject.set('msg', msgObject);\r\n\r\n        myNewObject.save().then(\r\n        (result) => {\r\n            console.log('Comment created', result);\r\n            setCommentsArr(commentsArr.concat(new CommentsModel(result)));\r\n            setLoading(false);\r\n        },\r\n        (error) => {\r\n            console.error('Error while creating Comment: ', error);\r\n        }\r\n        );\r\n        setAddComment(\"\");\r\n    }\r\n\r\n    //convert data to presentation\r\n    let commentsView;\r\n    if (users) {\r\n        commentsView = commentsArr.map(comment => {\r\n            const user = users.find(user => user.id === comment.user.id);\r\n            return <div className=\"comments-data\" key={comment.id}>\r\n                <div>{user.img ? <img src={user.img}></img> : <PersonCircle/>} {user.getFullName()}:</div>\r\n                <div>{comment.description}</div>\r\n            </div>}) \r\n    }\r\n    \r\n    const messagesView = messages.map((msg,index) => {\r\n        return <Card key={messages.indexOf(msg)}>\r\n            <Accordion.Toggle as={Card.Header} eventKey={'' + index}  onClick={e=>msgOnClick(index)}>\r\n            <div className=\"header-acc\">\r\n                <div>\r\n                    {wasReadByUser(index) ? null : <BellFill/>}\r\n                    {msg.title}\r\n                </div>\r\n                <div>\r\n                    {msg.getIcon()}\r\n                </div>\r\n            </div>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey={'' + index}>\r\n                \r\n            <Card.Body>\r\n                <div className=\"msg-comments-view\">\r\n                    <div className=\"msg-data\">\r\n                        {msg.img ? <img src={msg.img}></img> : <EnvelopeOpen></EnvelopeOpen> }\r\n                        <p>\r\n                            Details: {msg.details}\r\n                        </p>\r\n                        <p>\r\n                            Priority: {msg.priority}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"comments\">\r\n                        <p>\r\n                            Comments:\r\n                        </p>\r\n                        <div>\r\n                            {loading ? \"loading...\" : commentsView}\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"msg-btm\">\r\n                            <InputGroup className=\"mb-3\">\r\n                                <FormControl\r\n                                value={addComment}\r\n                                onChange={e => setAddComment(e.target.value)}\r\n                                type=\"text\"\r\n                                placeholder=\"Add comment\"\r\n                                />\r\n                                <InputGroup.Append>\r\n                                <Button onClick={addCommentToDB} variant=\"outline-secondary\">Add</Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                            </div>\r\n                            {activeUser.isCommitteeMember ?\r\n                            <div className=\"msg-btm\">\r\n                                <Button onClick={() => setShowModal(true)}>Update</Button>\r\n                                <Button onClick={ e=> deleteMessage(msg.id)}>Delete</Button>\r\n                                </div> : null}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n        </Card>\r\n    });\r\n\r\n    return (\r\n        <div className=\"c-msg-view\">\r\n            <Accordion defaultActiveKey={selectedMsg}>\r\n                {messagesView}\r\n            </Accordion>\r\n            {(selectedMsg !== null && messages && selectedMsg < messages.length) ? <UpdateMessageModal\r\n                show={showModal} \r\n                handleClose={() => setShowModal(false)} \r\n                updateMessage={updateMessageFromModal} \r\n                id={messages[selectedMsg].id} \r\n                currentTitle={messages[selectedMsg].title} \r\n                currentDetails={messages[selectedMsg].details} \r\n                currentPriority={messages[selectedMsg].priority} \r\n                currentImg={messages[selectedMsg].img}/> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessagesView;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewMessageModal\\NewMessageModal.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\CommentsModel.js",["136"],"import UserModel from \"./UserModel\";\r\n\r\nclass CommentsModel {\r\n    constructor(results){\r\n        this.id = results.id;\r\n        this.createdAt = results.get(\"createdAt\");\r\n        this.description = results.get(\"description\");\r\n        this.user = results.get(\"user\");\r\n        this.parseComment = results;\r\n    }\r\n}\r\n\r\nexport default CommentsModel;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\UpdateMessageModal\\UpdateMessageModal.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\SignUp\\SignUp.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Votings\\Votings.js",["137","138"],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport NewVotingModal from '../../components/NewVotingModal/NewVotingModal';\r\nimport { Button, Col, Container, Form, Row } from 'react-bootstrap';\r\nimport VotingsView from '../../components/VotingsView/VotingsView';\r\nimport './Votings.css';\r\n\r\n\r\n//Votings component is the page were user see all relevant votings and filter them\r\n//Committee member can add a new vote, change current voting end date and see results and voting percentage\r\n//Tenants can also vote on open votings and see results for finished votings\r\nfunction Votings(props) {\r\n    const {activeUser, votings, addVoting, updateVoting, updateSelectedVote, onLogOut, users} = props;\r\n    const [activeVotingsArr, setActiveVotingsArr] = useState([]);\r\n    const [finishedVotingsArr, setFinishedVotingsArr] = useState([]);\r\n    const [searchByStr, setSearchByStr] = useState(\"\");\r\n    const [showModal, setShowModal] = useState(false);\r\n\r\n    useEffect(()=> {\r\n        if (activeUser) {\r\n            setActiveVotingsArr(votings.filter(item => item.endDate >= new Date()));\r\n            setFinishedVotingsArr(votings.filter(item => item.endDate < new Date()));\r\n        }\r\n        else {\r\n            return <Redirect to=\"/\" />;\r\n        }\r\n    }, [votings])\r\n\r\n    if(!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    //converting data into presentation\r\n    const filteredFinishedVotings = finishedVotingsArr.filter(voting => (voting.title.includes(searchByStr) || voting.details.includes(searchByStr)));\r\n    const filteredActiveVotings = activeUser.isCommitteeMember ? activeVotingsArr : activeVotingsArr.filter(voting => voting.results.map(res => res[\"user\"]).indexOf(activeUser.id) === -1);\r\n\r\n    return (\r\n        <div className=\"p-votings\">\r\n            <div>\r\n                <Container className=\"votings-cols\">\r\n                    <Col>\r\n                        <Row>\r\n                            <h3>Active Votings</h3>\r\n                        </Row>\r\n                        <Row>\r\n                        {activeUser.isCommitteeMember ?\r\n                            <Col className=\"new-voting-btn\">\r\n                                <Button variant=\"link\" onClick={() => setShowModal(true)}>New Voting</Button>\r\n                            </Col> : null}\r\n                        </Row>\r\n                        <Row className=\"accor-size\" sm={12}>\r\n                            <VotingsView isActive={true} votings={filteredActiveVotings} activeUser={activeUser} updateVotingFromModal={updateVoting} updateSelectedVote={updateSelectedVote} users={users}/>\r\n                        </Row>\r\n                    </Col>\r\n                    \r\n                    <Col>\r\n                        <Row>\r\n                            <h3>Votings Results</h3>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col className=\"search-size\">\r\n                                <Form>\r\n                                    <Form.Group controlId=\"formBasicSearch\">\r\n                                    <Form.Control value={searchByStr} type=\"text\" placeholder=\"Filter by text in Title and Details\" onChange={e => setSearchByStr(e.target.value)}/>\r\n                                    </Form.Group>\r\n                                </Form>\r\n                            </Col>\r\n                        </Row>\r\n                        <Row className=\"accor-size\" sm={12}>\r\n                            <VotingsView isActive={false} votings={filteredFinishedVotings} activeUser={activeUser} updateVotingFromModal={updateVoting} updateSelectedVote={updateSelectedVote} users={users}/>\r\n                        </Row>\r\n                    </Col>\r\n                </Container>\r\n                \r\n            </div>\r\n            \r\n            <Container>\r\n                \r\n            </Container>\r\n            <NewVotingModal show={showModal} handleClose={() => setShowModal(false)} addVoting={addVoting}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Votings;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\VotingModel.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewVotingModal\\NewVotingModal.js",["139","140"],"import { useState } from 'react';\r\nimport { Button, Col, Form, FormControl, FormGroup, Image, InputGroup, Modal, Row } from 'react-bootstrap';\r\nimport { FileMinusFill, PlusCircleFill } from 'react-bootstrap-icons';\r\nimport './NewVotingModal.css';\r\n\r\nfunction NewVotingModal(props) {\r\n    const { show, handleClose, addVoting } = props;\r\n    const [title, setTitle] = useState(\"\");\r\n    const [details, setDetails] = useState(\"\");\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [options, setOptions] = useState([]);\r\n    const [newOption, setNewOption] = useState(\"\");\r\n    \r\n    function closeModal() {\r\n      setTitle(\"\");\r\n      setDetails(\"\");\r\n      setEndDate(null);\r\n      setOptions([]);\r\n      setNewOption(\"\");\r\n      handleClose();\r\n    }\r\n\r\n    function handleAddMessage() {\r\n      addVoting(title, details, endDate, options);\r\n      closeModal();\r\n    }\r\n  \r\n    function handleRemoveOption(option) {\r\n        let items = [...options];\r\n        const index = items.indexOf(option)\r\n        if (index !== -1) {\r\n            items.splice(index, 1);\r\n            setOptions(items);\r\n  }\r\n    }\r\n    return (\r\n      <Modal show={show} onHide={closeModal} size=\"xl\" className=\"c-new-voting-modal\">\r\n          <Modal.Header closeButton>\r\n              <Modal.Title>New Voting</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n              <Form>\r\n                \r\n                  <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n                      <Form.Label column sm={2}>\r\n                          Title\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"text\" placeholder=\"Voting Title\" required value={title} onChange={e => setTitle(e.target.value)} />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={2}>\r\n                        Details\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"text\" placeholder=\"Voting Details\" required value={details} onChange={e => setDetails(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={2}>\r\n                        End Date\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"date\" placeholder=\"Voting End Date\" required value={endDate} onChange={e => setEndDate(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Label column sm={2}>\r\n                             Options\r\n                         </Form.Label>\r\n                  {options.map((option,index) => \r\n                    <InputGroup className=\"options-group\" key={index} as={Row} controlId=\"inputHorizontalOption\">\r\n                        \r\n                         {/* <Col> */}\r\n                                <FormControl className=\"option\"\r\n                                type=\"text\" placeholder={option} required\r\n                                />\r\n                                <InputGroup.Append>\r\n                                <Button variant=\"outline-secondary\" onClick={()=>handleRemoveOption(option)}>\r\n                                    <FileMinusFill></FileMinusFill>\r\n                                </Button>\r\n                                </InputGroup.Append>\r\n                        {/* </Col> */}\r\n                    </InputGroup>\r\n                    )}\r\n                    <InputGroup className=\"sm-3\">\r\n                        <InputGroup.Prepend>\r\n                        <Button variant=\"outline-secondary\" onClick={()=>setOptions(options.concat(newOption))}>\r\n                            <PlusCircleFill></PlusCircleFill>\r\n                        </Button>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl value={newOption} aria-describedby=\"basic-addon1\" placeholder=\"Add option\" onChange={e=>setNewOption(e.target.value)}/>\r\n                    </InputGroup>\r\n\r\n              </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={closeModal}>\r\n                  Cancel\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={handleAddMessage}>\r\n                  Create Voting\r\n              </Button>\r\n          </Modal.Footer>\r\n      </Modal>\r\n  );\r\n  }\r\n\r\nexport default NewVotingModal;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\VotingsView\\VotingsView.js",["141","142","143"],"import { useState } from 'react';\r\nimport { Accordion, Button, Card, Dropdown, DropdownButton} from 'react-bootstrap';\r\nimport './VotingsView.css';\r\nimport PieChart from '../PieChart/PieChart';\r\nimport EndDateUpdateModal from '../EndDataUpdateModal/EndDateUpdateModal';\r\n\r\nfunction VotingsView(props) {\r\n    const {isActive, votings, activeUser, updateVotingFromModal, updateSelectedVote, users} = props;\r\n    const [selectedVoting, setSelectedVoting] = useState(null);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [endDate, setEndDate] = useState(null);\r\n    const [userVote, setUserVote] = useState(null);\r\n\r\n\r\n    function handleClose() {\r\n        setEndDate(null);\r\n        setShowModal(false);\r\n      }\r\n  \r\n    function handleUpdateEndDate(endDate, voting) {\r\n        setShowModal(false);\r\n        updateVotingFromModal(endDate, voting);\r\n    }\r\n    \r\n    function handleSelectedVote(item,voting) {\r\n        updateSelectedVote(item, voting)\r\n    }\r\n    \r\n    const votingsView = votings.map((voting, index) =>   \r\n        <Card key={index}>\r\n            <Accordion.Toggle as={Card.Header} eventKey={'' + index} onClick={e=>setSelectedVoting(index)}>\r\n            <div className=\"header-acc\">\r\n                <div>\r\n                    {voting.title}\r\n                </div>\r\n                {isActive ? null : <div>\r\n                    Result: {voting.getFinalResult()}\r\n                </div>}\r\n            </div>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey={'' + index}>\r\n                \r\n            <Card.Body>\r\n                <div className=\"voting-comments-view\">\r\n                    <div>\r\n                        <p>\r\n                            Details: {voting.details}\r\n                        </p>\r\n                        {activeUser.isCommitteeMember || !isActive ? null :\r\n                        <div>\r\n                        <p>\r\n                            Your vote:\r\n                        </p>\r\n                        <DropdownButton id=\"dropdown-variants-Info\" variant=\"info\" title=\"Your Vote\" value={userVote}>\r\n                            {voting.options.map(item=><Dropdown.Item value={item} onClick={()=>handleSelectedVote(item, voting)}>{item}</Dropdown.Item>)}\r\n                        </DropdownButton> \r\n                        </div>}\r\n                        \r\n                            {isActive && activeUser.isCommitteeMember ?\r\n                            <div>\r\n                                Voting Precentage\r\n                                <PieChart voting={voting} users={users} isResData={false} activeUser={activeUser}/> \r\n                            </div> : null}\r\n                            {!isActive && activeUser.isCommitteeMember ?\r\n                            <div className=\"charts\"> \r\n                                <div>\r\n                                    Voting Precentage\r\n                                    <PieChart voting={voting} users={users} isResData={false} activeUser={activeUser}/>\r\n                                </div>\r\n                                <div>\r\n                                    Voting Results\r\n                                    <PieChart voting={voting} users={users} isResData={true} activeUser={activeUser}/> \r\n                                </div>\r\n                            </div> : null}\r\n                            {!isActive && !activeUser.isCommitteeMember ?\r\n                            <div className=\"charts\"> \r\n                                <div>\r\n                                    Voting Results\r\n                                    <PieChart voting={voting} users={users} isResData={true} activeUser={activeUser}/> \r\n                                </div>\r\n                            </div> : null}\r\n                        \r\n                    </div>\r\n                    <div className=\"end-date-section\">\r\n                    <p>\r\n                            End Date: {voting.endDate.toLocaleDateString()}\r\n                        </p>\r\n                        {isActive  && activeUser.isCommitteeMember? <div className=\"voting-btm\">\r\n                        <Button onClick={() => setShowModal(true)}>Update End Date</Button>\r\n                    </div> : null}\r\n                    </div>\r\n                    \r\n                    \r\n                </div>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n\r\n            \r\n         </Card>\r\n    );\r\n\r\n    return (\r\n        <div className=\"c-voting-view\">\r\n            <Accordion defaultActiveKey={selectedVoting}>\r\n                {votingsView}\r\n            </Accordion>\r\n            <EndDateUpdateModal show={showModal} handleClose={() => setShowModal(false)} updateVoting={handleUpdateEndDate} voting={votings[selectedVoting]} ></EndDateUpdateModal>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingsView;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Tenants\\Tenants.js",["144"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewTenantModat\\NewTenantModal.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\TenantsView\\TenantsView.js",["145","146"],"import React from 'react';\r\nimport { useState } from 'react';\r\nimport { Accordion, Button, Card, Col, Container, Row } from 'react-bootstrap';\r\nimport './TenantsView.css';\r\nimport UpdateTenantsModal from '../UpdateTenantsModal/UpdateTenantsModal';\r\n\r\nfunction TenantsView(props) {\r\n    const {tenants, activeUser, deleteTenant, updateTenantsInfoFromModal} = props;\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [selectedTenant, setSelectedTenant] = useState(null);\r\n\r\n    function handleDelete() {\r\n        deleteTenant(tenants[selectedTenant].id)\r\n        setSelectedTenant(null)\r\n    }\r\n\r\n    const tenantsView = tenants.map((tenant, index) => \r\n        <Card key={index}>\r\n            <Accordion.Toggle as={Card.Header} eventKey={'' + index} onClick={e=>setSelectedTenant(index)}>\r\n            <div className=\"header-acc\">\r\n                {tenant.fname} {tenant.lname}\r\n            </div>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey={'' + index}>\r\n                \r\n            <Card.Body>\r\n                <Container>\r\n                    <Row className=\"tenant-body\">\r\n                        <Col lg={4} md={4} sm={12}>\r\n                        <img src={tenant.img}></img>\r\n                        </Col>\r\n                        <Col className=\"tenant-info\" lg={4} md={4} sm={12}>\r\n                        <p>Name: {tenant.fname} {tenant.lname}</p>\r\n                        <p>Email: {tenant.email}</p>\r\n                        <p>Building: {tenant.building}</p>\r\n                        <p>Apt: {tenant.apartment}</p>\r\n                        </Col>\r\n                        <Col lg={3} md={3} sm={12}>\r\n                        <div className=\"edit-btm\">\r\n                            \r\n                            <Button onClick={() => setShowModal(true)}>Update</Button>\r\n                            <Button onClick={handleDelete}>Delete</Button>\r\n                        </div>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n        </Card>\r\n    );\r\n\r\n    return (\r\n        <div className=\"c-tenant-view\">\r\n            <Accordion defaultActiveKey={selectedTenant}>\r\n                {tenantsView}\r\n            </Accordion>\r\n            {tenants && selectedTenant !== null ? \r\n            <UpdateTenantsModal\r\n                show={showModal} \r\n                user={tenants[selectedTenant]}\r\n                handleClose={() => setShowModal(false)} \r\n                updateTenant={updateTenantsInfoFromModal} \r\n                id={tenants[selectedTenant].id} \r\n                currentFname={tenants[selectedTenant].fname} \r\n                currentLname={tenants[selectedTenant].lname} \r\n                currentEmail={tenants[selectedTenant].email}\r\n                currentBuilding={tenants[selectedTenant].building}\r\n                currentApartment={tenants[selectedTenant].apartment}\r\n                currentImg={tenants[selectedTenant].img}></UpdateTenantsModal> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TenantsView;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\UpdateTenantsModal\\UpdateTenantsModal.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\PieChart\\PieChart.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Dashboards\\Dashboards.js",["147","148"],"import React from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport './Dashboards.css';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport MessagesView from '../../components/MessagesView/MessagesView';\r\nimport VotingsView from '../../components/VotingsView/VotingsView';\r\nimport { EmojiSmileFill } from 'react-bootstrap-icons';\r\n\r\nfunction Dashboards(props) {\r\n    const {activeUser, messages, votings, addVoting, updateVoting, updateSelectedVote, onLogOut, users} = props;\r\n\r\n    if (!activeUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    //convert data to presentation\r\n\r\n    const messagesArr = messages.filter(msg => msg.readBy.indexOf(activeUser.id) === -1);\r\n    const activeVotingsArr = activeUser.isCommitteeMember ? \r\n      votings.filter(voting => voting.endDate >= new Date()): \r\n      votings.filter(voting => ((voting.endDate >= new Date()) && (voting.results.map(res => res[\"user\"]).indexOf(activeUser.id) === -1)));\r\n    const finishedVotingsArr = votings.filter(voting => voting.endDate < new Date());\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"p-dashboards\">\r\n            <Container>\r\n                <Row>\r\n                    <Col md={6} sm={12}>\r\n                        <p>New Messages {messagesArr.length}</p>\r\n                         {messagesArr.length > 0 ?\r\n                            <MessagesView messages={messagesArr} activeUser={activeUser} deleteMessage={null} updateMessageFromModal={null}/> :\r\n                            <p>There are no new messages <EmojiSmileFill></EmojiSmileFill></p>}\r\n                    </Col>\r\n                    <Col md={6} sm={12}>\r\n                        <p>Pending Votings {activeVotingsArr.length}</p>\r\n                        {activeVotingsArr.length > 0 ?                        \r\n                            <VotingsView isActive={true} votings={activeVotingsArr} activeUser={activeUser} updateVotingFromModal={updateVoting} updateSelectedVote={updateSelectedVote} users={users}/> :\r\n                            <p>There are no pending votings <EmojiSmileFill></EmojiSmileFill></p>}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col md={6} sm={12}>\r\n                    <p>Voting Results</p>\r\n                    {finishedVotingsArr.length > 0 ? \r\n                        <VotingsView isActive={false} votings={finishedVotingsArr} activeUser={activeUser} updateVotingFromModal={null} users={users}/> : \r\n                        <p>There are no votings results <EmojiSmileFill></EmojiSmileFill></p>}\r\n                    </Col>\r\n                    <Col md={6} sm={12}>\r\n                        <p>New Issues</p>\r\n                        There are no new issues <EmojiSmileFill></EmojiSmileFill>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboards;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\EndDataUpdateModal\\EndDateUpdateModal.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":26,"column":10,"nodeType":"155","messageId":"156","endLine":26,"endColumn":18},{"ruleId":"157","severity":1,"message":"158","line":79,"column":4,"nodeType":"159","endLine":79,"endColumn":16,"suggestions":"160"},{"ruleId":"153","severity":1,"message":"161","line":7,"column":10,"nodeType":"155","messageId":"156","endLine":7,"endColumn":20},{"ruleId":"153","severity":1,"message":"162","line":7,"column":22,"nodeType":"155","messageId":"156","endLine":7,"endColumn":30},{"ruleId":"153","severity":1,"message":"163","line":3,"column":22,"nodeType":"155","messageId":"156","endLine":3,"endColumn":33},{"ruleId":"153","severity":1,"message":"164","line":2,"column":24,"nodeType":"155","messageId":"156","endLine":2,"endColumn":31},{"ruleId":"153","severity":1,"message":"162","line":12,"column":83,"nodeType":"155","messageId":"156","endLine":12,"endColumn":91},{"ruleId":"153","severity":1,"message":"165","line":3,"column":35,"nodeType":"155","messageId":"156","endLine":3,"endColumn":39},{"ruleId":"153","severity":1,"message":"166","line":7,"column":20,"nodeType":"155","messageId":"156","endLine":7,"endColumn":32},{"ruleId":"157","severity":1,"message":"167","line":33,"column":8,"nodeType":"159","endLine":33,"endColumn":21,"suggestions":"168"},{"ruleId":"169","severity":1,"message":"170","line":103,"column":34,"nodeType":"171","endLine":103,"endColumn":54},{"ruleId":"169","severity":1,"message":"170","line":126,"column":36,"nodeType":"171","endLine":126,"endColumn":55},{"ruleId":"153","severity":1,"message":"172","line":1,"column":8,"nodeType":"155","messageId":"156","endLine":1,"endColumn":17},{"ruleId":"153","severity":1,"message":"162","line":15,"column":78,"nodeType":"155","messageId":"156","endLine":15,"endColumn":86},{"ruleId":"157","severity":1,"message":"173","line":29,"column":8,"nodeType":"159","endLine":29,"endColumn":17,"suggestions":"174"},{"ruleId":"153","severity":1,"message":"175","line":2,"column":42,"nodeType":"155","messageId":"156","endLine":2,"endColumn":51},{"ruleId":"153","severity":1,"message":"176","line":2,"column":53,"nodeType":"155","messageId":"156","endLine":2,"endColumn":58},{"ruleId":"153","severity":1,"message":"177","line":11,"column":12,"nodeType":"155","messageId":"156","endLine":11,"endColumn":19},{"ruleId":"153","severity":1,"message":"178","line":12,"column":22,"nodeType":"155","messageId":"156","endLine":12,"endColumn":33},{"ruleId":"153","severity":1,"message":"179","line":15,"column":14,"nodeType":"155","messageId":"156","endLine":15,"endColumn":25},{"ruleId":"153","severity":1,"message":"162","line":12,"column":74,"nodeType":"155","messageId":"156","endLine":12,"endColumn":82},{"ruleId":"153","severity":1,"message":"161","line":8,"column":21,"nodeType":"155","messageId":"156","endLine":8,"endColumn":31},{"ruleId":"169","severity":1,"message":"170","line":30,"column":25,"nodeType":"171","endLine":30,"endColumn":47},{"ruleId":"153","severity":1,"message":"180","line":10,"column":43,"nodeType":"155","messageId":"156","endLine":10,"endColumn":52},{"ruleId":"153","severity":1,"message":"162","line":10,"column":88,"nodeType":"155","messageId":"156","endLine":10,"endColumn":96},"no-native-reassign",["181"],"no-negated-in-lhs",["182"],"no-unused-vars","'redirect' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'votings'. Either include it or remove the dependency array.","ArrayExpression",["183"],"'activeUser' is assigned a value but never used.","'onLogOut' is assigned a value but never used.","'NavDropdown' is defined but never used.","'CardImg' is defined but never used.","'Form' is defined but never used.","'EnvelopeFill' is defined but never used.","React Hook useEffect has missing dependencies: 'commentsArr' and 'messages'. Either include them or remove the dependency array.",["184"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'UserModel' is defined but never used.","React Hook useEffect has a missing dependency: 'activeUser'. Either include it or remove the dependency array.",["185"],"'FormGroup' is defined but never used.","'Image' is defined but never used.","'endDate' is assigned a value but never used.","'setUserVote' is assigned a value but never used.","'handleClose' is defined but never used.","'addVoting' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"186","fix":"187"},{"desc":"188","fix":"189"},{"desc":"186","fix":"190"},"Update the dependencies array to be: [activeUser, votings]",{"range":"191","text":"192"},"Update the dependencies array to be: [commentsArr, messages, selectedMsg]",{"range":"193","text":"194"},{"range":"195","text":"192"},[3084,3096],"[activeUser, votings]",[1497,1510],"[commentsArr, messages, selectedMsg]",[1350,1359]]