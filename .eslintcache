[{"C:\\Users\\אריאל שפר\\ham-system-app\\src\\index.js":"1","C:\\Users\\אריאל שפר\\ham-system-app\\src\\App.js":"2","C:\\Users\\אריאל שפר\\ham-system-app\\src\\reportWebVitals.js":"3","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\LogIn\\LogIn.js":"4","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\HomePage\\HomePage.js":"5","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\Navbar\\Navbar.js":"6","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\UserModel.js":"7","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Issues\\Issues.js":"8","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\Card\\Card.js":"9","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Messages\\Messages.js":"10","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\MessageModel.js":"11","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\MessagesView\\MessagesView.js":"12","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewMessageModal\\NewMessageModal.js":"13","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\CommentsModel.js":"14","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\UpdateMessageModal\\UpdateMessageModal.js":"15","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\SignUp\\SignUp.js":"16","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Votings\\Votings.js":"17","C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\VotingModel.js":"18","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewVotingModal\\NewVotingModal.js":"19","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\VotingsView\\VotingsView.js":"20","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Tenants\\Tenants.js":"21","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewTenantModat\\NewTenantModal.js":"22","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\TenantsView\\TenantsView.js":"23","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\UpdateTenantsModal\\UpdateTenantsModal.js":"24","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\PieChart\\PieChart.js":"25","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Dashboards\\Dashboards.js":"26"},{"size":827,"mtime":1610393629722,"results":"27","hashOfConfig":"28"},{"size":8588,"mtime":1611452442317,"results":"29","hashOfConfig":"28"},{"size":362,"mtime":499162500000,"results":"30","hashOfConfig":"28"},{"size":2147,"mtime":1611428381148,"results":"31","hashOfConfig":"28"},{"size":12470,"mtime":1611012740203,"results":"32","hashOfConfig":"28"},{"size":1371,"mtime":1611352436269,"results":"33","hashOfConfig":"28"},{"size":682,"mtime":1611436764663,"results":"34","hashOfConfig":"28"},{"size":493,"mtime":1611450780117,"results":"35","hashOfConfig":"28"},{"size":790,"mtime":1611013012830,"results":"36","hashOfConfig":"28"},{"size":3954,"mtime":1611444532999,"results":"37","hashOfConfig":"28"},{"size":719,"mtime":1611444557348,"results":"38","hashOfConfig":"28"},{"size":8641,"mtime":1611444595882,"results":"39","hashOfConfig":"28"},{"size":3905,"mtime":1611432799741,"results":"40","hashOfConfig":"28"},{"size":350,"mtime":1611145499504,"results":"41","hashOfConfig":"28"},{"size":3807,"mtime":1611443829379,"results":"42","hashOfConfig":"28"},{"size":5276,"mtime":1611091955950,"results":"43","hashOfConfig":"28"},{"size":3690,"mtime":1611454187346,"results":"44","hashOfConfig":"28"},{"size":856,"mtime":1611322818144,"results":"45","hashOfConfig":"28"},{"size":3908,"mtime":1611306521550,"results":"46","hashOfConfig":"28"},{"size":7124,"mtime":1611453942517,"results":"47","hashOfConfig":"28"},{"size":7058,"mtime":1611450716140,"results":"48","hashOfConfig":"28"},{"size":4357,"mtime":1611226918615,"results":"49","hashOfConfig":"28"},{"size":6923,"mtime":1611241671612,"results":"50","hashOfConfig":"28"},{"size":10193,"mtime":1611241542630,"results":"51","hashOfConfig":"28"},{"size":1813,"mtime":1611453826895,"results":"52","hashOfConfig":"28"},{"size":4815,"mtime":1611382473895,"results":"53","hashOfConfig":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"8yuumn",{"filePath":"57","messages":"58","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"56"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"56"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"56"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"56"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"56"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"56"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"111","messages":"112","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"56"},"C:\\Users\\אריאל שפר\\ham-system-app\\src\\index.js",[],["114","115"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\App.js",["116","117","118"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\reportWebVitals.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\LogIn\\LogIn.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\HomePage\\HomePage.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\UserModel.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Issues\\Issues.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\Card\\Card.js",["119"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Messages\\Messages.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\MessageModel.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\MessagesView\\MessagesView.js",["120","121","122","123","124"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Accordion, Button, Card, Form, FormControl, InputGroup } from 'react-bootstrap';\r\nimport './MessagesView.css';\r\nimport Parse from 'parse';\r\nimport CommentsModel from '../../models/CommentsModel';\r\nimport { BellFill, EnvelopeFill, EnvelopeOpen, PersonCircle } from 'react-bootstrap-icons';\r\nimport UpdateMessageModal from '../UpdateMessageModal/UpdateMessageModal';\r\nimport { Redirect } from 'react-router';\r\n\r\nfunction MessagesView(props) {\r\n    const {messages, activeUser, users, deleteMessage, updateMessageFromModal} = props;\r\n    const [selectedMsg, setSelectedMsg] = useState(null);\r\n    const [commentsArr, setCommentsArr] = useState([]);\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [addComment, setAddComment] = useState(\"\");\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    useEffect(()=> {\r\n        // async function fetchMessage() {\r\n        //     debugger;\r\n        //     const parseMessage = Parse.Object.extend('message');\r\n        //     const query = new Parse.Query(parseMessage);\r\n        //     console.log(\"selected message\", messages[selectedMsg])\r\n        //     const parseMessageData = await query.get(messages[selectedMsg].id);\r\n        //     fetchCommentsData(parseMessageData);\r\n        // }\r\n\r\n        async function fetchCommentsData(msg) {\r\n            const parseComment = Parse.Object.extend('Comment');\r\n            const query = new Parse.Query(parseComment);\r\n            query.equalTo(\"msg\", messages[selectedMsg].parseMsg);\r\n            const parseComments = await query.find();\r\n            setCommentsArr(parseComments.map(item => new CommentsModel(item)));\r\n            setLoading(false);\r\n            console.log(\"comments arr\", commentsArr);\r\n        }\r\n            if (selectedMsg !== null) {\r\n                fetchCommentsData();\r\n            }\r\n    }, [selectedMsg])\r\n\r\n    if(!activeUser) {\r\n        return <Redirect to=\"/\" />\r\n    }\r\n\r\n    async function updateMessage(readBy, index){\r\n        const message = Parse.Object.extend('message');\r\n        const query = new Parse.Query(message);\r\n        try {\r\n            console.log(\"here\", messages)\r\n            console.log(\"here2\", index)\r\n            const object = await query.get(messages[index].id);\r\n            object.set('readBy', readBy);\r\n            try{\r\n                const response = await object.save();\r\n                console.log('Updated message', response);\r\n            }\r\n            catch (error1) {\r\n                console.error('Error while updating message', error1);\r\n            }\r\n        }\r\n        catch (error2) {\r\n            console.log('Error while updating message', error2)\r\n        }\r\n    }\r\n\r\n    function msgOnClick(eventKey) {\r\n        setLoading(true);\r\n        setSelectedMsg(eventKey);\r\n\r\n        if (wasReadByUser(eventKey)){\r\n            console.log(\"was read\", messages[eventKey].readBy)\r\n            return;\r\n        } else {\r\n            console.log(\"wasn't read\", messages[eventKey].readBy)\r\n            messages[eventKey].readBy.push(activeUser.id)\r\n            updateMessage(messages[eventKey].readBy, eventKey);\r\n        }\r\n    }\r\n\r\n    function wasReadByUser(eventKey) {\r\n        if (messages[eventKey].readBy.includes(activeUser.id)){\r\n            return true;\r\n        }\r\n        else{\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async function addCommentToDB() {\r\n        const message = Parse.Object.extend('message');\r\n        const query = new Parse.Query(message);\r\n        const Comment = Parse.Object.extend('Comment');\r\n        const myNewObject = new Comment();\r\n        const msgObject = await query.get(messages[selectedMsg].id);\r\n        myNewObject.set('description', addComment);\r\n        myNewObject.set('user', Parse.User.current());\r\n        myNewObject.set('msg', msgObject);\r\n\r\n        myNewObject.save().then(\r\n        (result) => {\r\n            console.log('Comment created', result);\r\n            setCommentsArr(commentsArr.concat(new CommentsModel(result)));\r\n            setLoading(false);\r\n        },\r\n        (error) => {\r\n            console.error('Error while creating Comment: ', error);\r\n        }\r\n        );\r\n        setAddComment(\"\");\r\n    }\r\n\r\n    //convert data to presentation\r\n    const commentsView = commentsArr.map(comment => {\r\n        const user = users.find(user => user.id === comment.user.id);\r\n        return <div className=\"comments-data\" key={comment.id}>\r\n            <div>{user.img ? <img src={user.img}></img> : <PersonCircle/>} {user.getFullName()}:</div>\r\n            <div>{comment.description}</div>\r\n            {console.log(\"comment user\", comment.parseComment)}\r\n        </div>})\r\n\r\n    const messagesView = messages.map((msg,index) => {\r\n        return <Card key={messages.indexOf(msg)}>\r\n            <Accordion.Toggle as={Card.Header} eventKey={'' + index}  onClick={e=>msgOnClick(index)}>\r\n            <div className=\"header-acc\">\r\n                <div>\r\n                    {wasReadByUser(index) ? null : <BellFill/>}\r\n                    {msg.title}\r\n                </div>\r\n                <div>\r\n                    {msg.getIcon()}\r\n                </div>\r\n            </div>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey={'' + index}>\r\n                \r\n            <Card.Body>\r\n                <div className=\"msg-comments-view\">\r\n                    <div className=\"msg-data\">\r\n                        {msg.img ? <img src={msg.img}></img> : <EnvelopeOpen></EnvelopeOpen> }\r\n                        <p>\r\n                            Details: {msg.details}\r\n                        </p>\r\n                        <p>\r\n                            Priority: {msg.priority}\r\n                        </p>\r\n                    </div>\r\n                    <div className=\"comments\">\r\n                        <p>\r\n                            Comments:\r\n                        </p>\r\n                        <div>\r\n                            {loading ? \"loading...\" : commentsView}\r\n                        </div>\r\n                        <div>\r\n                            <div className=\"msg-btm\">\r\n                            <InputGroup className=\"mb-3\">\r\n                                <FormControl\r\n                                value={addComment}\r\n                                onChange={e => setAddComment(e.target.value)}\r\n                                type=\"text\"\r\n                                placeholder=\"Add comment\"\r\n                                />\r\n                                <InputGroup.Append>\r\n                                <Button onClick={addCommentToDB} variant=\"outline-secondary\">Add</Button>\r\n                                </InputGroup.Append>\r\n                            </InputGroup>\r\n                            </div>\r\n                            \r\n                            <div className=\"msg-btm\">\r\n                                <Button onClick={() => setShowModal(true)}>Update</Button>\r\n                                <Button onClick={ e=> deleteMessage(msg.id)}>Delete</Button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n            {/* {(selectedMsg !== null && messages) ? <UpdateMessageModal\r\n                show={showModal} \r\n                handleClose={() => setShowModal(false)} \r\n                updateMessage={updateMessageFromModal} \r\n                id={messages[selectedMsg].id} \r\n                currentTitle={messages[selectedMsg].title} \r\n                currentDetails={messages[selectedMsg].details} \r\n                currentPriority={messages[selectedMsg].priority} \r\n                currentImg={messages[selectedMsg].img}/> : null} */}\r\n        </Card>\r\n    });\r\n\r\n    return (\r\n        <div className=\"c-msg-view\">\r\n            <Accordion defaultActiveKey={selectedMsg}>\r\n                {messagesView}\r\n            </Accordion>\r\n            {(selectedMsg !== null && messages && selectedMsg < messages.length) ? <UpdateMessageModal\r\n                show={showModal} \r\n                handleClose={() => setShowModal(false)} \r\n                updateMessage={updateMessageFromModal} \r\n                id={messages[selectedMsg].id} \r\n                currentTitle={messages[selectedMsg].title} \r\n                currentDetails={messages[selectedMsg].details} \r\n                currentPriority={messages[selectedMsg].priority} \r\n                currentImg={messages[selectedMsg].img}/> : null}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default MessagesView;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewMessageModal\\NewMessageModal.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\CommentsModel.js",["125"],"import UserModel from \"./UserModel\";\r\n\r\nclass CommentsModel {\r\n    constructor(results){\r\n        this.id = results.id;\r\n        this.createdAt = results.get(\"createdAt\");\r\n        this.description = results.get(\"description\");\r\n        this.user = results.get(\"user\");\r\n        this.parseComment = results;\r\n    }\r\n}\r\n\r\nexport default CommentsModel;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\UpdateMessageModal\\UpdateMessageModal.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\SignUp\\SignUp.js",["126"],"import * as React from 'react';\r\nimport Parse from 'parse';\r\nimport UserModel from '../../models/UserModel';\r\nimport { Button, Form, Image, Row} from 'react-bootstrap';\r\nimport { Redirect } from 'react-router';\r\nimport './SignUp.css';\r\nimport { useState } from 'react';\r\n\r\nexport function SignUp(props) {\r\n  const {onSignUp} = props;\r\n  const [fname, setFname] = useState(\"\");\r\n  const [lname, setLname] = useState(\"\");\r\n  const [userName, setUserName] = useState(\"\");\r\n  const [img, setImg] = useState(null);\r\n  const [email, setEmail] = useState(\"\");\r\n  const [pwd, setPwd] = useState(\"\");\r\n  const [city, setCity] = useState(\"\");\r\n  const [street, setStreet] = useState(\"\");\r\n  const [building, setBuilding] = useState(\"\");\r\n  const [apartment, setApartment] = useState(\"\");\r\n  const [redirect, setRedirect] = useState(false);\r\n  \r\n  function handleFileChange(e) {\r\n    if (e.target.files.length === 1) {\r\n        setImg(e.target.files[0]);\r\n    } else {\r\n        setImg(null);\r\n    }\r\n  }\r\n\r\n  async function signup() {\r\n    try{\r\n        const Community = Parse.Object.extend('Community');\r\n        const myNewObject = new Community();\r\n\r\n        myNewObject.set('address', { city: city, street: street });\r\n\r\n        const result = await myNewObject.save();\r\n        \r\n        console.log('Community created', result);\r\n\r\n        const user = new Parse.User()\r\n        user.set('username', userName);\r\n        user.set('email', email);\r\n        user.set('fname', fname);\r\n        user.set('lname', lname);\r\n        user.set('apartment', apartment);\r\n        user.set('isCommitteeMember', true);\r\n        user.set('img', new Parse.File(img.name, img));\r\n        user.set('community', result);\r\n        user.set('building', building);\r\n        user.set('password', pwd);\r\n\r\n        user.signUp().then((user) => {\r\n        console.log('User signed up', user);\r\n        }).catch(error => {\r\n        console.error('Error while signing up user', error);\r\n        });\r\n        onSignUp(user);\r\n        setRedirect(true);\r\n        }\r\n        catch(error){\r\n            console.error('Error while creating Community: ', error);\r\n        }\r\n  }\r\n\r\n  if (redirect) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  const imgURL = img ? URL.createObjectURL(img) : \"\";\r\n\r\n  return (\r\n    <div className=\"p-signup\">\r\n        \r\n      <Form>\r\n      <h2>\r\n            Create a Committee Member Account\r\n        </h2>\r\n        <Form.Group controlId=\"formBasicUserFirstName\">\r\n          <Form.Label>First name</Form.Label>\r\n          <Form.Control value={fname} type=\"text\" placeholder=\"Enter your first name\" onChange={(e)=>setFname(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicUserLastName\">\r\n          <Form.Label>Last name</Form.Label>\r\n          <Form.Control value={lname} type=\"text\" placeholder=\"Enter your last name\" onChange={(e)=>setLname(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicUserLastName\">\r\n          <Form.Label>User name</Form.Label>\r\n          <Form.Control value={userName} type=\"text\" placeholder=\"Select your user name\" onChange={(e)=>setUserName(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Email address</Form.Label>\r\n          <Form.Control value={email} type=\"email\" placeholder=\"Enter your email\" onChange={(e)=>setEmail(e.target.value)}/>\r\n          <Form.Text className=\"text-muted\">\r\n            We'll never share your email with anyone else.\r\n          </Form.Text>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n          <Form.Label>Password</Form.Label>\r\n          <Form.Control value={pwd} type=\"password\" placeholder=\"Password\" onChange={(e)=>setPwd(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicUserCity\">\r\n          <Form.Label>City</Form.Label>\r\n          <Form.Control value={city} type=\"text\" placeholder=\"Enter city name\" onChange={(e)=>setCity(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicUserLastName\">\r\n          <Form.Label>Street</Form.Label>\r\n          <Form.Control value={street} type=\"text\" placeholder=\"Enter street name\" onChange={(e)=>setStreet(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicUserLastName\">\r\n          <Form.Label>Building</Form.Label>\r\n          <Form.Control value={building} type=\"text\" placeholder=\"Enter building number\" onChange={(e)=>setBuilding(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group controlId=\"formBasicUserLastName\">\r\n          <Form.Label>Apartment</Form.Label>\r\n          <Form.Control value={apartment} type=\"text\" placeholder=\"Enter apartment number\" onChange={(e)=>setApartment(e.target.value)}/>\r\n        </Form.Group>\r\n\r\n        <Form.Group as={Row} controlId=\"formHorizontalImage\">\r\n          <Form.Label>Img</Form.Label>\r\n          <Form.Control type=\"file\" placeholder=\"Select profile img\" accept=\"image/*\" onChange={handleFileChange}/>\r\n        </Form.Group>\r\n\r\n        <Image src={imgURL} className=\"img-preview\"/>\r\n\r\n        <Button variant=\"primary\" type=\"button\" onClick={signup}>\r\n          Submit\r\n        </Button>\r\n      </Form>\r\n      \r\n      \r\n    </div>\r\n  );\r\n};","C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Votings\\Votings.js",["127"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\models\\VotingModel.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewVotingModal\\NewVotingModal.js",["128","129"],"import { useState } from 'react';\r\nimport { Button, Col, Form, FormControl, Image, InputGroup, Modal, Row } from 'react-bootstrap';\r\nimport { PlusCircleFill } from 'react-bootstrap-icons';\r\nimport InputGroupWithExtras from 'react-bootstrap/esm/InputGroup';\r\n\r\nfunction NewVotingModal(props) {\r\n    const { show, handleClose, addVoting } = props;\r\n    const [title, setTitle] = useState(\"\");\r\n    const [details, setDetails] = useState(\"\");\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [options, setOptions] = useState([]);\r\n    const [newOption, setNewOption] = useState(\"\");\r\n    \r\n    function closeModal() {\r\n      setTitle(\"\");\r\n      setDetails(\"\");\r\n      setEndDate(null);\r\n      setOptions([]);\r\n      handleClose();\r\n    }\r\n\r\n    function handleAddMessage() {\r\n      addVoting(title, details, endDate, options);\r\n      closeModal();\r\n    }\r\n  \r\n    return (\r\n      <Modal show={show} onHide={closeModal} size=\"xl\" className=\"c-new-voting-modal\">\r\n          <Modal.Header closeButton>\r\n              <Modal.Title>New Voting</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n              <Form>\r\n                \r\n                  <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n                      <Form.Label column sm={2}>\r\n                          Voting Title\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"text\" placeholder=\"Voting Title\" value={title} onChange={e => setTitle(e.target.value)} />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={2}>\r\n                        Voting Details\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"text\" placeholder=\"Voting Details\" value={details} onChange={e => setDetails(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={2}>\r\n                        Voting End Date\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"date\" placeholder=\"Voting End Date\" value={endDate} onChange={e => setEndDate(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  {options.map((option,index) => \r\n                    <Form.Group key={index} as={Row} controlId=\"formHorizontalImage\">\r\n                        <Form.Label column sm={2}>\r\n                            Voting Option\r\n                        </Form.Label>\r\n                        <Col sm={10}>\r\n                            <Form.Control type=\"number\" placeholder={option}/>\r\n                        </Col>\r\n                    </Form.Group>)}\r\n                    <InputGroup className=\"sm-3\">\r\n                        <InputGroup.Prepend>\r\n                        <Button variant=\"outline-secondary\" onClick={()=>setOptions(options.concat(newOption))}>\r\n                            <PlusCircleFill></PlusCircleFill>\r\n                        </Button>\r\n                        </InputGroup.Prepend>\r\n                        <FormControl value={newOption} aria-describedby=\"basic-addon1\" placeholder=\"Add option\" onChange={e=>setNewOption(e.target.value)}/>\r\n                    </InputGroup>\r\n\r\n              </Form>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={closeModal}>\r\n                  Cancel\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={handleAddMessage}>\r\n                  Create Voting\r\n              </Button>\r\n          </Modal.Footer>\r\n      </Modal>\r\n  );\r\n  }\r\n\r\nexport default NewVotingModal;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\VotingsView\\VotingsView.js",["130","131","132","133","134","135"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Tenants\\Tenants.js",["136","137"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\NewTenantModat\\NewTenantModal.js",[],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\TenantsView\\TenantsView.js",["138","139","140","141","142","143","144","145","146","147"],"import React, { useEffect } from 'react';\r\nimport { useState } from 'react';\r\nimport { Accordion, Button, Card, Form, FormControl, InputGroup } from 'react-bootstrap';\r\nimport './TenantsView.css';\r\nimport Parse from 'parse';\r\nimport CommentsModel from '../../models/CommentsModel';\r\nimport { BellFill } from 'react-bootstrap-icons';\r\nimport UpdateTenantsModal from '../UpdateTenantsModal/UpdateTenantsModal';\r\n\r\nfunction TenantsView(props) {\r\n    const {tenants, activeUser, deleteTenant, updateTenantsInfoFromModal} = props;\r\n    const [showModal, setShowModal] = useState(false);\r\n    const [selectedTenant, setSelectedTenant] = useState(null);\r\n\r\n    // useEffect(()=> {\r\n    //     // async function fetchMessage() {\r\n    //     //     debugger;\r\n    //     //     const parseMessage = Parse.Object.extend('message');\r\n    //     //     const query = new Parse.Query(parseMessage);\r\n    //     //     console.log(\"selected message\", messages[selectedMsg])\r\n    //     //     const parseMessageData = await query.get(messages[selectedMsg].id);\r\n    //     //     fetchCommentsData(parseMessageData);\r\n    //     // }\r\n\r\n    //     async function fetchCommentsData(msg) {\r\n    //         const parseComment = Parse.Object.extend('Comment');\r\n    //         const query = new Parse.Query(parseComment);\r\n    //         query.equalTo(\"msg\", messages[selectedMsg].parseMsg);\r\n    //         const parseComments = await query.find();\r\n    //         setCommentsArr(parseComments.map(item => new CommentsModel(item)));\r\n    //         setLoading(false);\r\n    //         console.log(\"comments arr\", commentsArr);\r\n    //     }\r\n    //         if (selectedMsg !== null) {\r\n    //             fetchCommentsData();\r\n    //         }\r\n    // }, [selectedMsg])\r\n\r\n\r\n    async function updateTenant(readBy){\r\n        // const message = Parse.Object.extend('message');\r\n        // const query = new Parse.Query(message);\r\n        // try {\r\n        //     const object = await query.get(messages[selectedMsg].id);\r\n        //     object.set('readBy', readBy);\r\n        //     try{\r\n        //         const response = await object.save();\r\n        //         console.log('Updated message', response);\r\n        //     }\r\n        //     catch (error1) {\r\n        //         console.error('Error while updating message', error1);\r\n        //     }\r\n        // }\r\n        // catch (error2) {\r\n        //     console.log('Error while updating message', error2)\r\n        // }\r\n    }\r\n\r\n    // function msgOnClick(eventKey) {\r\n    //     setLoading(true);\r\n    //     setSelectedMsg(eventKey);\r\n\r\n    //     if (wasReadByUser(eventKey)){\r\n    //         console.log(\"was read\", messages[eventKey].readBy)\r\n    //         return;\r\n    //     } else {\r\n    //         console.log(\"wasn't read\", messages[eventKey].readBy)\r\n    //         messages[eventKey].readBy.push(activeUser.id)\r\n    //         updateMessage(messages[eventKey].readBy);\r\n    //     }\r\n    // }\r\n\r\n    // function wasReadByUser(eventKey) {\r\n    //     if (messages[eventKey].readBy.includes(activeUser.id)){\r\n    //         return true;\r\n    //     }\r\n    //     else{\r\n    //         return false;\r\n    //     }\r\n    // }\r\n\r\n    // async function addCommentToDB() {\r\n    //     const message = Parse.Object.extend('message');\r\n    //     const query = new Parse.Query(message);\r\n    //     const Comment = Parse.Object.extend('Comment');\r\n    //     const myNewObject = new Comment();\r\n    //     const msgObject = await query.get(messages[selectedMsg].id);\r\n    //     myNewObject.set('description', addComment);\r\n    //     myNewObject.set('user', Parse.User.current());\r\n    //     myNewObject.set('msg', msgObject);\r\n\r\n    //     myNewObject.save().then(\r\n    //     (result) => {\r\n    //         console.log('Comment created', result);\r\n    //         setCommentsArr(commentsArr.concat(new CommentsModel(result)));\r\n    //         setLoading(false);\r\n    //     },\r\n    //     (error) => {\r\n    //         console.error('Error while creating Comment: ', error);\r\n    //     }\r\n    //     );\r\n    //     setAddComment(\"\");\r\n    // }\r\n\r\n    //convert data to presentation\r\n    // const commentsView = commentsArr.map(comment => \r\n    //     <div key={comment.id}>\r\n    //         <div>{comment.user.id}</div>\r\n    //         <div>{comment.description}</div>\r\n    //         {console.log(\"user\", comment.user.id)}\r\n    //     </div>)\r\n\r\n    const tenantsView = tenants.map((tenant, index) => {\r\n        return <Card key={index}>\r\n            {console.log(\"tenents\", tenants)}\r\n            {console.log(\"tenent[index]\", tenants[index])}\r\n            {console.log(\"selectedTenant\", selectedTenant)}\r\n            <Accordion.Toggle as={Card.Header} eventKey={'' + index} onClick={e=>setSelectedTenant(parseInt(index))}>\r\n            <div className=\"header-acc\">\r\n                {tenant.fname} {tenant.lname}\r\n            </div>\r\n            </Accordion.Toggle>\r\n            <Accordion.Collapse eventKey={'' + index}>\r\n                \r\n            <Card.Body>\r\n                <div className=\"tenant-body\">\r\n                    <div>\r\n                        <img src={tenant.img}></img>\r\n                    </div>\r\n                    <div className=\"tenant-info\">\r\n                        <p>Name: {tenant.fname} {tenant.lname}</p>\r\n                        <p>Email: {tenant.email}</p>\r\n                        <p>Building: {tenant.building}</p>\r\n                        <p>Apt: {tenant.apartment}</p>\r\n                    </div>\r\n                    <div>\r\n                        <div className=\"edit-btm\">\r\n                            <Button onClick={() => setShowModal(true)}>Update</Button>\r\n                            <Button onClick={ e=> deleteTenant(tenant.id, index)}>Delete</Button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </Card.Body>\r\n            </Accordion.Collapse>\r\n            {console.log(\"tenent[selectedTenant]\", tenants[selectedTenant])}\r\n            {(selectedTenant !== null) ? <UpdateTenantsModal\r\n                show={showModal} \r\n                handleClose={() => setShowModal(false)} \r\n                updateTenant={updateTenantsInfoFromModal} \r\n                id={tenants[selectedTenant].id} \r\n                currentFname={tenants[selectedTenant].fname} \r\n                currentLname={tenants[selectedTenant].lname} \r\n                currentEmail={tenants[selectedTenant].email}\r\n                currentBuilding={tenants[selectedTenant].building}\r\n                currentApartment={tenants[selectedTenant].apartment}\r\n                currentImg={tenants[selectedTenant].img}/> : null}\r\n        </Card>\r\n    });\r\n    console.log(\"tenants\", tenants);\r\n    return (\r\n        <div className=\"c-tenant-view\">\r\n            <Accordion defaultActiveKey={selectedTenant}>\r\n                {tenantsView}\r\n            </Accordion>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TenantsView;","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\UpdateTenantsModal\\UpdateTenantsModal.js",["148"],"import { useState } from 'react';\r\nimport { Button, Col, Form, Image, Modal, Row } from 'react-bootstrap';\r\n\r\nfunction UpdateTenantsModal(props) {\r\n    const { show, handleClose, updateTenant, id, currentFname, currentLname, currentEmail, currentBuilding, currentApartment, currentImg} = props;\r\n    const [fname, setFname] = useState(\"\");\r\n    const [lname, setLname] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [building, setBuilding] = useState(\"\");\r\n    const [apartment, setApartment] = useState(\"\");\r\n    const [img, setImg] = useState(\"\");\r\n    \r\n    function closeModal() {\r\n      setFname(\"\");\r\n      setLname(\"\");\r\n      setEmail(\"\");\r\n      setBuilding(\"\");\r\n      setApartment(\"\");\r\n      setImg(null);\r\n      handleClose();\r\n    }\r\n\r\n    function handleFileChange(e) {\r\n      if (e.target.files.length === 1) {\r\n          setImg(e.target.files[0]);\r\n      } else {\r\n          setImg(null);\r\n      }\r\n    }\r\n\r\n    function handleUpdateMessage() {\r\n        const newFname = fname ? fname : currentFname;\r\n        const newLname = lname ? lname : currentLname;\r\n        const newEmail = email ? email : currentEmail;\r\n        const newBuilding = building ? building : currentBuilding;\r\n        const newApartment = apartment ? apartment : currentApartment;\r\n        const newImg = img ? img : currentImg;\r\n        console.log(\"update\", newFname, newLname, newEmail, newBuilding, newApartment, newImg);\r\n        updateTenant(id, newFname, newLname, newEmail, newBuilding, newApartment, newImg);\r\n        closeModal();\r\n    }\r\n  \r\n    const imgURL = img ? URL.createObjectURL(img) : \"\";\r\n\r\n    return (\r\n      <Modal show={show} onHide={closeModal} size=\"xl\" className=\"c-new-message-modal\">\r\n          <Modal.Header closeButton>\r\n              <Modal.Title>Update Tenant's Info</Modal.Title>\r\n          </Modal.Header>\r\n\r\n          <Modal.Body>\r\n              <Form>\r\n                \r\n                  <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n                      <Form.Label column sm={3}>\r\n                          First Name\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"text\" placeholder={currentFname} value={fname} onChange={e => setFname(e.target.value)} />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={3}>\r\n                        Last Name\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"text\" placeholder={currentLname} value={lname} onChange={e => setLname(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={3}>\r\n                        Email\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"email\" placeholder={currentEmail} value={email} onChange={e => setEmail(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={3}>\r\n                        Building\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"text\" placeholder={currentBuilding} value={building} onChange={e => setBuilding(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={3}>\r\n                        Apartment\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"text\" placeholder={currentApartment} value={apartment} onChange={e => setApartment(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalImage\">\r\n                      <Form.Label column sm={3}>\r\n                          Image\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n                      </Col>\r\n                  </Form.Group>\r\n              </Form>\r\n              <Image src={imgURL} className=\"img-preview\"/>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={closeModal}>\r\n                  Cancel\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={handleUpdateMessage}>\r\n                  Update Tenant\r\n              </Button>\r\n          </Modal.Footer>\r\n\r\n          \r\n          {/* <Modal.Body>\r\n              <Form>\r\n                \r\n                  <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n                      <Form.Label column sm={2}>\r\n                          Message Title\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"text\" placeholder={currentTitle} value={title} onChange={e => setTitle(e.target.value)} />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={2}>\r\n                          Message Details\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"text\" placeholder={currentDetails} value={details} onChange={e => setDetails(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={2}>\r\n                          Message Priority\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"number\" placeholder={currentPriority} value={priority} onChange={e => setPriority(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalImage\">\r\n                      <Form.Label column sm={2}>\r\n                          Message Image\r\n                      </Form.Label>\r\n                      <Col sm={10}>\r\n                          <Form.Control type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n                      </Col>\r\n                  </Form.Group>\r\n              </Form>\r\n              <Image src={imgURL} className=\"img-preview\"/>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={closeModal}>\r\n                  Cancel\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={handleUpdateMessage}>\r\n                  Update Message\r\n              </Button>\r\n          </Modal.Footer> */}\r\n      </Modal>\r\n  );\r\n  }\r\n\r\nexport default UpdateTenantsModal;\r\n\r\n                {/* <Form.Group as={Row} controlId=\"formHorizontalName\">\r\n                      <Form.Label column sm={3}>\r\n                          First Name\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"text\" placeholder=\"First Name\" value={fname} onChange={e => setFname(e.target.value)} />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={3}>\r\n                        Last Name\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"text\" placeholder=\"Last Name\" value={lname} onChange={e => setLname(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={3}>\r\n                        Email\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"email\" placeholder=\"Email Address\" value={email} onChange={e => setEmail(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={3}>\r\n                        Building\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"text\" placeholder=\"Building\" value={building} onChange={e => setBuilding(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalDesc\">\r\n                      <Form.Label column sm={3}>\r\n                        Apartment\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"text\" placeholder=\"Apartment\" value={apartment} onChange={e => setApartment(e.target.value)}  />\r\n                      </Col>\r\n                  </Form.Group>\r\n\r\n                  <Form.Group as={Row} controlId=\"formHorizontalImage\">\r\n                      <Form.Label column sm={3}>\r\n                          Image\r\n                      </Form.Label>\r\n                      <Col sm={9}>\r\n                          <Form.Control type=\"file\" accept=\"image/*\" onChange={handleFileChange} />\r\n                      </Col>\r\n                  </Form.Group>\r\n              </Form>\r\n              <Image src={imgURL} className=\"img-preview\"/>\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={closeModal}>\r\n                  Cancel\r\n              </Button>\r\n              <Button variant=\"primary\" onClick={handleAddTenant}>\r\n                  Create Tenant\r\n              </Button>\r\n          </Modal.Footer> */}","C:\\Users\\אריאל שפר\\ham-system-app\\src\\components\\PieChart\\PieChart.js",["149","150"],"C:\\Users\\אריאל שפר\\ham-system-app\\src\\pages\\Dashboards\\Dashboards.js",["151"],"import React, { useEffect, useState } from 'react';\r\nimport { Redirect } from 'react-router';\r\nimport { AppNavbar } from '../../components/Navbar/Navbar';\r\nimport './Dashboards.css';\r\nimport Parse from 'parse'\r\nimport MessageModel from '../../models/MessageModel';\r\nimport { Col, Container, Row } from 'react-bootstrap';\r\nimport MessagesView from '../../components/MessagesView/MessagesView';\r\nimport VotingModel from '../../models/VotingModel';\r\nimport VotingsView from '../../components/VotingsView/VotingsView';\r\nimport { EmojiSmileFill } from 'react-bootstrap-icons';\r\n\r\nfunction Dashboards(props) {\r\n    const {activeUser, onLogOut} = props;\r\n    const [messagesArr, setMessagesArr] = useState([]);\r\n    const [activeVotingsArr, setActiveVotingsArr] = useState([]);\r\n    const [finishedVotingsArr, setFinishedVotingsArr] = useState([]);\r\n\r\n    useEffect(()=> {\r\n        async function fetchMessagesData() {\r\n            const parseMessage = Parse.Object.extend('message');\r\n            const query = new Parse.Query(parseMessage);\r\n            // const community = new Parse.Object.extend('Community');\r\n            // community.id = activeUser.community;\r\n            console.log(\"active user\", activeUser)\r\n            query.equalTo(\"community\", activeUser.community);\r\n            query.notEqualTo(\"readBy\", activeUser.id);\r\n            try {\r\n                const parseMessages = await query.find();\r\n                setMessagesArr(parseMessages.map(item => new MessageModel(item)));\r\n                console.log(\"messages arr\", parseMessages);\r\n            }\r\n            catch(error) {\r\n                console.log(\"error while fetching messages\", error);\r\n            }\r\n        }\r\n\r\n        async function fetchVotingsData() {\r\n            const Voting = Parse.Object.extend('Voting');\r\n            const query = new Parse.Query(Voting);\r\n            query.equalTo(\"community\", activeUser.community);\r\n            const parseVotings = await query.find();\r\n            // setFinishedVotingsArr(parseVotings.map(item => new VotingModel(item)));\r\n            // setActiveVotingsArr(parseVotings.filter(item => (item.get(\"endDate\") >= new Date()) && (item.get(\"results\").find(res => res[\"user\"] !== activeUser.id))).map(filteredItem => new VotingModel(filteredItem)));\r\n            setActiveVotingsArr(parseVotings.filter(item => ((item.get(\"endDate\") >= new Date()) && \r\n            (item.get(\"results\").filter(res => Object.values(res).indexOf(activeUser) === -1)))).map(filteredItem => new VotingModel(filteredItem)));\r\n            \r\n            setFinishedVotingsArr(parseVotings.filter(item => item.get(\"endDate\") < new Date()).map(filteredItem => new VotingModel(filteredItem)));\r\n            console.log('Voting found', parseVotings);\r\n            console.log(\"active\", activeVotingsArr);\r\n            console.log(\"finished\", finishedVotingsArr);\r\n        }\r\n\r\n        if (activeUser) {\r\n            fetchMessagesData();\r\n            fetchVotingsData();\r\n        }\r\n    }, [activeUser])\r\n\r\n    if (!activeUser) {\r\n        return <Redirect to=\"/\" />;\r\n    }\r\n\r\n    return (\r\n        <div className=\"p-dashboards\">\r\n            <AppNavbar activeUser={activeUser} onLogOut={onLogOut}/>\r\n            <Container>\r\n                <Row>\r\n                    <Col>\r\n                        <p>New Messages {messagesArr.length}</p>\r\n                         {messagesArr.length > 0 ?\r\n                            <MessagesView messages={messagesArr} activeUser={activeUser} deleteMessage={null} updateMessageFromModal={null}/> :\r\n                            <p>There are no new messages <EmojiSmileFill></EmojiSmileFill></p>}\r\n                    </Col>\r\n                    <Col>\r\n                        <p>Pending Votings {activeVotingsArr.length}</p>\r\n                        {activeVotingsArr.length > 0 ?\r\n                            <VotingsView isActive={true} votings={activeVotingsArr} activeUser={activeUser} updateVotingFromModal={null}/> :\r\n                            <p>There are no pending votings <EmojiSmileFill></EmojiSmileFill></p>}\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                    <p>Voting Results</p>\r\n                    {finishedVotingsArr.length > 0 ? \r\n                        <VotingsView isActive={false} votings={finishedVotingsArr} activeUser={activeUser} updateVotingFromModal={null}/> : \r\n                        <p>There are no votings results <EmojiSmileFill></EmojiSmileFill></p>}\r\n                    </Col>\r\n                    <Col>\r\n                        <p>New Issues</p>\r\n                        There are no new issues <EmojiSmileFill></EmojiSmileFill>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Dashboards;",{"ruleId":"152","replacedBy":"153"},{"ruleId":"154","replacedBy":"155"},{"ruleId":"156","severity":1,"message":"157","line":2,"column":22,"nodeType":"158","messageId":"159","endLine":2,"endColumn":30},{"ruleId":"156","severity":1,"message":"160","line":20,"column":10,"nodeType":"158","messageId":"159","endLine":20,"endColumn":18},{"ruleId":"161","severity":1,"message":"162","line":79,"column":4,"nodeType":"163","endLine":79,"endColumn":16,"suggestions":"164"},{"ruleId":"156","severity":1,"message":"165","line":2,"column":24,"nodeType":"158","messageId":"159","endLine":2,"endColumn":31},{"ruleId":"156","severity":1,"message":"166","line":3,"column":35,"nodeType":"158","messageId":"159","endLine":3,"endColumn":39},{"ruleId":"156","severity":1,"message":"167","line":7,"column":20,"nodeType":"158","messageId":"159","endLine":7,"endColumn":32},{"ruleId":"161","severity":1,"message":"168","line":41,"column":8,"nodeType":"163","endLine":41,"endColumn":21,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":118,"column":30,"nodeType":"172","endLine":118,"endColumn":50},{"ruleId":"170","severity":1,"message":"171","line":141,"column":36,"nodeType":"172","endLine":141,"endColumn":55},{"ruleId":"156","severity":1,"message":"173","line":1,"column":8,"nodeType":"158","messageId":"159","endLine":1,"endColumn":17},{"ruleId":"156","severity":1,"message":"173","line":3,"column":8,"nodeType":"158","messageId":"159","endLine":3,"endColumn":17},{"ruleId":"161","severity":1,"message":"174","line":26,"column":8,"nodeType":"163","endLine":26,"endColumn":17,"suggestions":"175"},{"ruleId":"156","severity":1,"message":"176","line":2,"column":42,"nodeType":"158","messageId":"159","endLine":2,"endColumn":47},{"ruleId":"156","severity":1,"message":"177","line":4,"column":8,"nodeType":"158","messageId":"159","endLine":4,"endColumn":28},{"ruleId":"156","severity":1,"message":"178","line":3,"column":72,"nodeType":"158","messageId":"159","endLine":3,"endColumn":83},{"ruleId":"156","severity":1,"message":"179","line":3,"column":85,"nodeType":"158","messageId":"159","endLine":3,"endColumn":95},{"ruleId":"156","severity":1,"message":"180","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":13},{"ruleId":"156","severity":1,"message":"181","line":6,"column":10,"nodeType":"158","messageId":"159","endLine":6,"endColumn":13},{"ruleId":"161","severity":1,"message":"182","line":20,"column":27,"nodeType":"183","endLine":22,"endColumn":15},{"ruleId":"184","severity":1,"message":"185","line":153,"column":30,"nodeType":"186","messageId":"187","endLine":153,"endColumn":52,"fix":"188"},{"ruleId":"156","severity":1,"message":"189","line":4,"column":34,"nodeType":"158","messageId":"159","endLine":4,"endColumn":42},{"ruleId":"156","severity":1,"message":"190","line":4,"column":44,"nodeType":"158","messageId":"159","endLine":4,"endColumn":58},{"ruleId":"156","severity":1,"message":"191","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":26},{"ruleId":"156","severity":1,"message":"166","line":3,"column":35,"nodeType":"158","messageId":"159","endLine":3,"endColumn":39},{"ruleId":"156","severity":1,"message":"178","line":3,"column":41,"nodeType":"158","messageId":"159","endLine":3,"endColumn":52},{"ruleId":"156","severity":1,"message":"179","line":3,"column":54,"nodeType":"158","messageId":"159","endLine":3,"endColumn":64},{"ruleId":"156","severity":1,"message":"180","line":5,"column":8,"nodeType":"158","messageId":"159","endLine":5,"endColumn":13},{"ruleId":"156","severity":1,"message":"192","line":6,"column":8,"nodeType":"158","messageId":"159","endLine":6,"endColumn":21},{"ruleId":"156","severity":1,"message":"193","line":7,"column":10,"nodeType":"158","messageId":"159","endLine":7,"endColumn":18},{"ruleId":"156","severity":1,"message":"194","line":11,"column":21,"nodeType":"158","messageId":"159","endLine":11,"endColumn":31},{"ruleId":"156","severity":1,"message":"195","line":40,"column":20,"nodeType":"158","messageId":"159","endLine":40,"endColumn":32},{"ruleId":"170","severity":1,"message":"171","line":128,"column":25,"nodeType":"172","endLine":128,"endColumn":47},{"ruleId":"196","severity":1,"message":"197","line":175,"column":17,"nodeType":"198","messageId":"199","endLine":238,"endColumn":30},{"ruleId":"156","severity":1,"message":"191","line":1,"column":17,"nodeType":"158","messageId":"159","endLine":1,"endColumn":26},{"ruleId":"156","severity":1,"message":"194","line":5,"column":38,"nodeType":"158","messageId":"159","endLine":5,"endColumn":48},{"ruleId":"161","severity":1,"message":"200","line":58,"column":8,"nodeType":"163","endLine":58,"endColumn":20,"suggestions":"201"},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'redirect' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'users' and 'votings'. Either include them or remove the dependency array.","ArrayExpression",["204"],"'CardImg' is defined but never used.","'Form' is defined but never used.","'EnvelopeFill' is defined but never used.","React Hook useEffect has missing dependencies: 'commentsArr' and 'messages'. Either include them or remove the dependency array.",["205"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'UserModel' is defined but never used.","React Hook useEffect has a missing dependency: 'activeUser'. Either include it or remove the dependency array.",["206"],"'Image' is defined but never used.","'InputGroupWithExtras' is defined but never used.","'FormControl' is defined but never used.","'InputGroup' is defined but never used.","'Parse' is defined but never used.","'Pie' is defined but never used.","Assignments to the 'selectItems' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","no-whitespace-before-property","Unexpected whitespace before property votingsView.","MemberExpression","unexpectedWhitespace",{"range":"207","text":"208"},"'Dropdown' is defined but never used.","'DropdownButton' is defined but never used.","'useEffect' is defined but never used.","'CommentsModel' is defined but never used.","'BellFill' is defined but never used.","'activeUser' is assigned a value but never used.","'updateTenant' is defined but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","React Hook useEffect has missing dependencies: 'activeVotingsArr' and 'finishedVotingsArr'. Either include them or remove the dependency array.",["209"],"no-global-assign","no-unsafe-negation",{"desc":"210","fix":"211"},{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},[6994,6996],".",{"desc":"216","fix":"217"},"Update the dependencies array to be: [activeUser, users, votings]",{"range":"218","text":"219"},"Update the dependencies array to be: [commentsArr, messages, selectedMsg]",{"range":"220","text":"221"},"Update the dependencies array to be: [activeUser, votings]",{"range":"222","text":"223"},"Update the dependencies array to be: [activeUser, activeVotingsArr, finishedVotingsArr]",{"range":"224","text":"225"},[3224,3236],"[activeUser, users, votings]",[1919,1932],"[commentsArr, messages, selectedMsg]",[1118,1127],"[activeUser, votings]",[2990,3002],"[activeUser, activeVotingsArr, finishedVotingsArr]"]